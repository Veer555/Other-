public void Check()
{
    // Check rows, columns, and diagonals
    for (int i = 0; i < gridnum; i++)
    {
        for (int j = 0; j <= gridnum - matchnum; j++)
        {
            // Check rows
            CheckLine(i * gridnum + j, 1);

            // Check columns
            CheckLine(j * gridnum + i, gridnum);

            // Check diagonals
            if (i <= gridnum - matchnum)
            {
                if (j <= gridnum - matchnum)
                    CheckLine(i * gridnum + j, gridnum + 1);
                if (j >= matchnum - 1)
                    CheckLine(i * gridnum + j + matchnum - 1, gridnum - 1);
            }
        }
    }
}

void CheckLine(int startIndex, int step)
{
    string player = "";

    for (int i = 0; i < matchnum; i++)
    {
        string cellText = l[startIndex + i * step].GetComponentInChildren<Text>().text;
        if (string.IsNullOrEmpty(player))
            player = cellText;
        else if (cellText != player)
            return;
    }

    if (!string.IsNullOrEmpty(player))
    {
        wintxt.text = player == "O" ? "Player A win" : "Player B win";
        win = true;
    }
}
