// AI condition start grid() to aichek6x6()

using UnityEngine;
using UnityEngine.UI;

public class TicTacToe : MonoBehaviour
{
    public int gridNum = 3; // Change this to the desired grid size
    public int matchNum = 3; // Change this to the desired match condition

    private Button[] buttons;

    private void Start()
    {
        buttons = GetComponentsInChildren<Button>();
        grid();
    }

    private void grid()
    {
        int[,] winCombinations = GenerateWinCombinations();

        foreach (int i in winCombinations)
        {
            if (CheckWinCondition(i, "X"))
            {
                return;
            }
        }

        foreach (int i in winCombinations)
        {
            if (CheckWinCondition(i, "O"))
            {
                return;
            }
        }
    }

    private int[,] GenerateWinCombinations()
    {
        int rows = gridNum;
        int cols = gridNum;
        int[,] combinations = new int[rows * cols, matchNum];

        // Rows
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j <= cols - matchNum; j++)
            {
                for (int k = 0; k < matchNum; k++)
                {
                    combinations[i * cols + j + k, k] = i * cols + j + k;
                }
            }
        }

        // Columns
        for (int i = 0; i <= rows - matchNum; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                for (int k = 0; k < matchNum; k++)
                {
                    combinations[i * cols + j + k, k] = i * cols + j + k;
                }
            }
        }

        // Diagonals (top-left to bottom-right)
        for (int i = 0; i <= rows - matchNum; i++)
        {
            for (int j = 0; j <= cols - matchNum; j++)
            {
                for (int k = 0; k < matchNum; k++)
                {
                    combinations[i * cols + j + k, k] = (i + k) * cols + j + k;
                }
            }
        }

        // Diagonals (top-right to bottom-left)
        for (int i = 0; i <= rows - matchNum; i++)
        {
            for (int j = matchNum - 1; j < cols; j++)
            {
                for (int k = 0; k < matchNum; k++)
                {
                    combinations[i * cols + j - k, k] = (i + k) * cols + j - k;
                }
            }
        }

        return combinations;
    }

    private bool CheckWinCondition(int[] combination, string player)
    {
        int count = 0;
        int emptyCellIndex = -1;

        foreach (int index in combination)
        {
            if (buttons[index].GetComponentInChildren<Text>().text == player)
            {
                count++;
            }
            else if (buttons[index].GetComponentInChildren<Text>().text == "")
            {
                emptyCellIndex = index;
            }
        }

        if (count == matchNum - 1 && emptyCellIndex != -1)
        {
            PlayerPrefs.SetInt("AI", emptyCellIndex);
            return true;
        }

        return false;
    }
}
