using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class TicTacToeGame : MonoBehaviour
{
    [SerializeField] private int boardSize = 3; // Size of the Tic Tac Toe board.
    [SerializeField] private GameObject tilePrefab; // Reference to your tile prefab.
    [SerializeField] private float tileSize = 1;
    [SerializeField] private Text gameOverText;

    private enum Player { None, X, O }
    private Player[,] board;
    private bool isPlayerX = true;
    private bool isGameFinished = false;

    private void Start()
    {
        InitializeBoard();
        GenerateGrid();
    }

    private void InitializeBoard()
    {
        board = new Player[boardSize, boardSize];
    }

    private void GenerateGrid()
    {
        for (int row = 0; row < boardSize; row++)
        {
            for (int col = 0; col < boardSize; col++)
            {
                float posX = col * tileSize;
                float posY = -row * tileSize;

                Vector2 tilePosition = new Vector2(posX, posY);
                GameObject tile = Instantiate(tilePrefab, tilePosition, Quaternion.identity, transform);

                // Attach a click event handler to the tile.
                int r = row;
                int c = col;
                tile.GetComponent<Button>().onClick.AddListener(() => OnTileClick(r, c));
            }
        }
    }

    private void OnTileClick(int row, int col)
    {
        if (isGameFinished || board[row, col] != Player.None)
            return;

        // Update the board and display "X" or "O" on the clicked tile.
        board[row, col] = isPlayerX ? Player.X : Player.O;
        SetTileText(row, col, isPlayerX ? "X" : "O");
        isPlayerX = !isPlayerX;

        // Check for a win or a draw.
        if (CheckForWin(row, col))
        {
            gameOverText.text = isPlayerX ? "Player O wins!" : "Player X wins!";
            isGameFinished = true;
        }
        else if (IsBoardFull())
        {
            gameOverText.text = "It's a draw!";
            isGameFinished = true;
        }
        else if (!isPlayerX)
        {
            // AI player's turn (assuming AI plays randomly).
            AIPlayRandomMove();
        }
    }

    private void SetTileText(int row, int col, string text)
    {
        // You need to implement a method to set the text of the tile at row, col.
        // This can be done by accessing the Text component of the tile and setting its text.
        // Example: boardTiles[row, col].GetComponentInChildren<Text>().text = text;
    }

    private bool CheckForWin(int row, int col)
    {
        // Implement your win checking logic here.
        // Check for a win along the current row, column, and diagonals.
        // Return true if there's a win, false otherwise.
        return false;
    }

    private bool IsBoardFull()
    {
        for (int row = 0; row < boardSize; row++)
        {
            for (int col = 0; col < boardSize; col++)
            {
                if (board[row, col] == Player.None)
                {
                    return false; // If there's an empty cell, the board is not full.
                }
            }
        }
        return true; // All cells are filled; it's a draw.
    }

    private void AIPlayRandomMove()
    {
        // Implement your AI logic here.
        // This is a basic example where AI picks a random empty cell.
        List<Vector2Int> emptyCells = new List<Vector2Int>();

        for (int row = 0; row < boardSize; row++)
        {
            for (int col = 0; col < boardSize; col++)
            {
                if (board[row, col] == Player.None)
                {
                    emptyCells.Add(new Vector2Int(row, col));
                }
            }
        }

        if (emptyCells.Count > 0)
        {
            int randomIndex = Random.Range(0, emptyCells.Count);
            int aiRow = emptyCells[randomIndex].x;
            int aiCol = emptyCells[randomIndex].y;
            OnTileClick(aiRow, aiCol); // Simulate the AI's click on the selected tile.
        }
    }
}