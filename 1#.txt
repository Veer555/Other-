// complete p_p cs

using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class P_P : MonoBehaviour
{
    public GameObject btn;
    public GameObject btnholder;
    public Text wintxt, playertxt;

    private int gridnum = 3, matchnum = 3;
    private List<GameObject> l = new List<GameObject>();
    private bool win = false;
    private play p;

    public void restart()
    {
        SceneManager.LoadScene("play");
    }
    // Start is called before the first frame update
    void Start()
    {
        p = FindObjectOfType<play>();
        gridnum = p.gridnum;
        matchnum = p.matchnum;

        SetCellSize();

        for (int i = 0; i < gridnum * gridnum; i++)
        {
            GameObject g = Instantiate(btn, btnholder.transform);
            Button button = g.GetComponent<Button>();
            Text buttonText = g.GetComponentInChildren<Text>();
            buttonText.text = "";
            button.onClick.AddListener(() => Click(g));
            l.Add(g);
        }
    }

    private void SetCellSize()
    {
        float cellSize = 91f;
        switch (gridnum)
        {
            case 4:
                cellSize = 68f;
                break;
            case 5:
                cellSize = 54f;
                break;
            case 6:
                cellSize = 45f;
                break;
        }

        btnholder.GetComponent<GridLayoutGroup>().cellSize = new Vector2(cellSize, cellSize);
    }

    public void Click(GameObject g)
    {
        if (win) return; // If the game is already won, do nothing.

        int filledCount = CountFilledButtons();
        Text buttonText = g.GetComponentInChildren<Text>();
        Button button = g.GetComponent<Button>();

        if (string.IsNullOrEmpty(buttonText.text))
        {
            buttonText.text = (filledCount % 2 == 0) ? "O" : "X";
            playertxt.text = (filledCount % 2 == 0) ? "Player B" : "Player A";

            button.interactable = false;
            check();
        }
    }

    private int CountFilledButtons()
    {
        int count = 0;
        foreach (GameObject buttonObject in l)
        {
            Text buttonText = buttonObject.GetComponentInChildren<Text>();
            if (!string.IsNullOrEmpty(buttonText.text))
            {
                count++;
            }
        }
        return count;
    }

    /*public void click(GameObject g)
    {
        int j = 0;
        for (int i = 0; i < l.Count; i++)
        {
            if (l[i].GetComponentInChildren<Text>().text != "")
            {
                j++;
            }
        }
        if (win == false)
        {
            if (j % 2 == 0)
            {
                g.GetComponentInChildren<Text>().text = "O";
                g.GetComponent<Button>().interactable = false;
                playertxt.text = "Player B";
            }
            else
            {
                g.GetComponentInChildren<Text>().text = "X";
                g.GetComponent<Button>().interactable = false;
                playertxt.text = "Player A";
            }
            check();
        }
    }*/

    public void check()
    {
        for (int i = 0; i < gridnum; i++)
        {
            for (int j = 0; j < gridnum; j++)
            {
                if (CheckWin(i, j))
                {
                    if (l[i * gridnum + j].GetComponentInChildren<Text>().text == "O")
                    {
                        wintxt.text = "Player A wins";
                    }
                    else if (l[i * gridnum + j].GetComponentInChildren<Text>().text == "X")
                    {
                        wintxt.text = "Player B wins";
                    }
                    win = true;
                    return;
                }
            }
        }
    }

    private bool CheckWin(int row, int col)
    {
        string symbol = l[row * gridnum + col].GetComponentInChildren<Text>().text;

        if (string.IsNullOrEmpty(symbol))
        {
            return false;
        }

        // Check horizontally
        for (int i = 0; i < matchnum; i++)
        {
            if (col + i >= gridnum || l[row * gridnum + col + i].GetComponentInChildren<Text>().text != symbol)
            {
                break;
            }

            if (i == matchnum - 1)
            {
                return true;
            }
        }

        // Check vertically
        for (int i = 0; i < matchnum; i++)
        {
            if (row + i >= gridnum || l[(row + i) * gridnum + col].GetComponentInChildren<Text>().text != symbol)
            {
                break;
            }

            if (i == matchnum - 1)
            {
                return true;
            }
        }

        // Check diagonally (top-left to bottom-right)
        if (row + matchnum <= gridnum && col + matchnum <= gridnum)
        {
            for (int i = 0; i < matchnum; i++)
            {
                if (l[(row + i) * gridnum + col + i].GetComponentInChildren<Text>().text != symbol)
                {
                    break;
                }

                if (i == matchnum - 1)
                {
                    return true;
                }
            }
        }

        // Check diagonally (top-right to bottom-left)
        if (row + matchnum <= gridnum && col - matchnum + 1 >= 0)
        {
            for (int i = 0; i < matchnum; i++)
            {
                if (l[(row + i) * gridnum + col - i].GetComponentInChildren<Text>().text != symbol)
                {
                    break;
                }

                if (i == matchnum - 1)
                {
                    return true;
                }
            }
        }

        return false;
    }
}
